Устойчивая сортировка - которая одинаковые ключи не меняет местами

Сайт, для визуализации сортировок:

https://visualgo.net/en/sorting?slide=1

Там, на сайте сверху есть выбор сортировок:

Алгоритмы сортировки на основе сравнения:
BUB - Пузырьковая сортировка,
SEL - Сортировка по Выбору,
INS - Сортировка Вставок,
MER - Сортировка слиянием (рекурсивная реализация),
QUI - Быстрая сортировка (рекурсивная реализация),
R-Q - Случайная Быстрая сортировка (рекурсивная реализация).
Не основанные на Сравнении Алгоритмы сортировки:
COU - Подсчет Сортировка,
Вид Радикала.

Пирамидальная - да поможет вам Бог (не нашёл визуализатора)

---Простые сортировки:---

• + Пузырьком (простой обмен) - сравниваем пары чисел, идём слева направо, меняем значения если больше.
• - Шейкерная - идём туда-обратно каждый раз уменьшая кол-во шагов на -1, пока не окажемся в центре
• + Сортировка простым выбором - находим минимальный элемент, и меняем его с первым элементом местами, в ост. части - находим минимальный, меняем местами с нужным ему местом и т.д.
• + Сортировки вставками - На каждой итерации берём элемент и вставляем в (левую) отсортированную часть, на своё место. В отсортированной части мы можем искать место вставки бинарным поиском.
• + Сортировка двухпутевыми вставками - резервируется массив в 2 раза больше (2n+1), и начиная сортировку с 1го, мы вставляем в середину. Следующие элементы вставляем в нужные стороны. Мы сокращаем число сдвигов в массиве.

---Интересные сортировки:---

• +- Сортировка Шелла - мы сравниваем не соседние элементы, а на расстоянии шага.
Шаг может быть равен di = n/2^i. n - колл-во элементов, а i - шаг. (классическая реализация). На каждом шаге уменьшаем шаги /2 (...,8,4,2,1) - пока не дойдём до 1. Потом сортируем любым другим алгоритмом.

• + Быстрая сортировка - разбиваем массив на 2 части так, используя опорный элемент, и реорганизуем так, что бы слева и справа от него элементы были, соответственно, меньше и больше этого элемента.

[Сложный алгоритм сортировки]:
Идём одновременно (с левого конца-направо), и (с правого конца-налево). Если какой-то элемент (справа < опорного), то идём другим бегунком, пока не будет (слева > опорного), и тогда меняем их местами, и делаем шаг. Идём так, пока не дойдём до опорного элемента.

Далее, рекурсивно, справа и слева от этого опорного элемента, мы также разбиваем массивы на 2, используя в них новые опорные элементы, и т.д.

Опорный элемент мы можем выбирать как захотим:
Первый
Последний
Случайный
Средний
Медиана трёх ((первый, последний, средний), сортируем, выбираем средний)

• Слияние: Дан массив, размера n.

Мы рекурсивно разбиваем его пополам (на группы по n/2 элементов, их ещё раз пополам, на группы по n/4 элементов ...) до тех пор, пока мы не разобьем на группы по 1 элементу.

Сливаем, по порядку возрастания. В каждой группе все элементы упорядочены по возрастанию (от наименьшего к наибольшему).

Есть 2 типа этой сортировки:

+ Нисходящая - рекурсивно разбиваем, и потом сливаем их, в группы по 1-2-4-8-...
+ Восходящая - из данного массива сливам пары по 2-4-8-... элементов (сразу, без разбиения)

• Пирамидальная сортировка: (бинарное дерево)

+ Для возрастающей пирамиды, каждый ключ в узле не меньше ключей в потомках у этого узла
+ Для убывающей - не больше
+ Важно: в дереве должны быть заполнены все узлы, кроме, возможно, нижних правых.

Восходящие построение пирамиды:
+ Сначала просто записываем данный список чисел, как дерево
+ Далее, начиная с последнего узла, у которого есть потомки (правый крайний),
+ Если ключ в узле меньше ключа у потомка этого узла, то мы меняем их местами, если строем возрастающую пирамиду
+ Далее идём по узлам влево, проверяя их правильность, пока дерево не заканчивается. Потом прыгаем на уровень выше, и опять идём справа налево
+ Если мы меняем 2 узла местами, то смотрим, соблюдается ли правило у узлов ниже(если они есть). Если не соблюдается - идём вниз и там балансируем.

Нисходящее построение: При построении дерева, сразу меняем ключи местами, если они нарушают правило

Пирамидальная сортировка:

+ Строим пирамиду, из заданного массива
+ Удаляем корень (n-1) раз, каждый раз балансируя пирамиду, после удаления

При удалении элемента, меняем его на самый последний (самый правый, нижний элемент)

При удалении, меняем местами, и удалённый элемент записываем другим цветом, и игнорируем его при балансировке. Делаем так, пока все элементы не будут удалёнными. Тогда, при обходе дерева по уровням (верхний элемент, следующий (вниз) ряд слева направо, следующий (вниз) ряд слева направо, ...) - мы получим упорядоченный по возрастанию список.

